{"version":3,"sources":["utils/extract-files.js","utils/request.js","utils/GqlClient.js","App.js","index.js"],"names":["isObject","value","extractFiles","tree","treePath","arguments","length","undefined","files","recurse","node","nodePath","Object","keys","forEach","key","path","concat","File","Blob","push","file","FileList","Array","prototype","slice","call","client","GqlClient","_ref","url","errorHandler","classCallCheck","this","_callee","query","variables","options","headers","others","fetchOptions","graphqlQuery","body","response","result","_args","regenerator_default","a","wrap","_context","prev","next","objectWithoutProperties","_excluded","JSON","stringify","print","FormData","append","_ref2","objectSpread2","method","Content-Type","fetch","sent","json","errors","abrupt","t0","status","stop","error","console","log","requestToGraphql","asyncToGenerator","mark","_x","_x2","apply","App","_useState","useState","_useState2","slicedToArray","setItems","fetchShips","request","gql","_templateObject","taggedTemplateLiteral","data","ships","useEffect","react_default","createElement","className","src","type","placeholder","onKeyDown","event","target","searchValue","filteredValues","filter","item","name","map","image","id","home_port","rootElement","document","getElementById","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.a500a48b.chunk.js","sourcesContent":["const isObject = value => typeof value === \"object\" && value !== null;\n\nconst extractFiles = (tree, treePath = \"\") => {\n  const files = [];\n\n  const recurse = (node, nodePath) => {\n    Object.keys(node).forEach(key => {\n      if (!isObject(node[key])) return;\n      const path = `${nodePath}${key}`;\n      if (\n        (typeof File !== \"undefined\" && node[key] instanceof File) ||\n        (typeof Blob !== \"undefined\" && node[key] instanceof Blob)\n      ) {\n        files.push({ path, file: node[key] });\n        node[key] = null; // eslint-disable-line no-param-reassign\n        return;\n      }\n\n      if (typeof FileList !== \"undefined\" && node[key] instanceof FileList) {\n        node[key] = Array.prototype.slice.call(node[key]); // eslint-disable-line no-param-reassign\n      }\n      recurse(node[key], `${path}.`);\n    });\n  };\n\n  if (isObject(tree)) {\n    recurse(tree, treePath === \"\" ? treePath : `${treePath}.`);\n  }\n  return files;\n};\n\nexport default extractFiles;\n","import GqlClient from \"./GqlClient\";\n\nconst handleGraphqlResponseErrors = error => {\n  console.log(error);\n};\n\nconst client = new GqlClient({\n  url: \"https://api.spacex.land/graphql\",\n  errorHandler: handleGraphqlResponseErrors\n});\nconst requestToGraphql = async (query, variables) => {\n  return client.query(query, variables);\n};\n\nexport default requestToGraphql;\n","import { print } from \"graphql/language/printer\";\nimport extractFiles from \"./extract-files\";\n\nexport default class GqlClient {\n  constructor({ url, errorHandler }) {\n    this.url = url;\n    this.errorHandler = errorHandler;\n  }\n\n  async query(query, variables, options = {}) {\n    const { headers, ...others } = options;\n    // Extracts all files from variables and replaces them\n    // with null\n    const files = extractFiles(variables);\n    let fetchOptions;\n\n    // uncomment below to debug query\n\n    // Creates a stringfied query\n    const graphqlQuery = JSON.stringify({\n      query: print(query), // \"print\" changes graphql AST into normal string\n      variables\n    });\n\n    // Uncomment to the debugðŸ‘‡\n\n    // (headers, JSON.stringify(variables, null, 2))\n    // console.log(\n    //   print(query),\n    //   JSON.stringify(variables)\n    // )\n\n    // Checks if there are any files in the query\n    // if there is then ...\n    if (files.length) {\n      // ...then creates a form object\n      const body = new FormData();\n      // appends query into body\n      body.append(\"operations\", graphqlQuery);\n      // apppend files into body\n      files.forEach(({ path, file }) => body.append(path, file));\n      // sets fetchOptions\n      fetchOptions = {\n        method: \"POST\",\n        body,\n        ...options\n      };\n    } else {\n      // sets fetchOption without any body append\n      // because there are no files here and we\n      // directly assign body to graphqlQuery\n      fetchOptions = {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\", ...headers },\n        body: graphqlQuery,\n        ...others\n      };\n    }\n    try {\n      // fetches the Data\n      const response = await fetch(this.url, fetchOptions);\n      const result = await response.json();\n      // Checks if there are any error in result\n      if (result.errors) {\n        // throw the result\n        throw result;\n      }\n      // otherwise just normally return them\n      return result;\n    } catch (e) {\n      // For other normal errors\n      // just throw them\n      throw Object({\n        status: this.errorHandler(e),\n        ...e\n      });\n    }\n  }\n}\n","import React, { useEffect, useState } from \"react\";\nimport \"./styles.css\";\nimport gql from \"graphql-tag\";\nimport request from \"./utils/request\";\n\nexport default function App() {\n  const [response, setItems] = useState([]);\n  const fetchShips = async () => {\n    const response = await request(gql`\n      {\n        ships {\n          name\n          home_port\n          image\n        }\n      }\n    `);\n    console.log(response);\n    setItems(response.data.ships);\n  };\n\n  useEffect(() => {\n    fetchShips();\n  }, []);\n  const searchInput = (event) => {\n    if (event.target.value !== \"\") {\n      if (event.key == \"Enter\") {\n        let searchValue = event.target.value;\n        let filteredValues = response.filter((item) => {\n          if (item.name == searchValue) {\n            return item;\n          }\n        });\n        setItems(filteredValues);\n      }\n    } else {\n      setItems(response);\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <img\n        src=\"https://i.postimg.cc/bvcxPkGw/TAKE-HOME-PROJ-logo.png\"\n        className=\"logoAlign\"\n      />\n      <div className=\"containerD\">\n        <input\n          type=\"search\"\n          className=\"inputAlign\"\n          placeholder=\"Search Ships\"\n          onKeyDown={searchInput}\n        />\n        <p className=\"totalResults\">Total Results : {response.length}</p>\n        <ul>\n          {response.map((item) => (\n            <div>\n              <img className=\"image-align\" src={item.image} />\n              <li className=\"list-styles\" key={item.id}>\n                {item.name}\n              </li>\n              <li className=\"list-styles-port\" key={item.id}>\n                Port : {item.home_port}\n              </li>\n            </div>\n          ))}\n        </ul>\n      </div>\n    </div>\n  );\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  rootElement\n);\n"],"sourceRoot":""}